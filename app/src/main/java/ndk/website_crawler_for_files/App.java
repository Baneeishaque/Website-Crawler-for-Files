/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ndk.website_crawler_for_files;

import com.gargoylesoftware.htmlunit.BrowserVersion;
import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.html.HtmlAnchor;
import com.gargoylesoftware.htmlunit.html.HtmlPage;

import java.io.*;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    static FileWriter recipesFile;

    public static void main(String[] args) {

//        System.out.println(new App().getGreeting());
        WebClient webClient = new WebClient(BrowserVersion.CHROME);
//        webClient.getOptions().setCssEnabled(false);
//        webClient.getOptions().setThrowExceptionOnFailingStatusCode(false);
//        webClient.getOptions().setThrowExceptionOnScriptError(false);
//        webClient.getOptions().setPrintContentOnFailingStatusCode(false);

        try {
            String executableFileName = "/home/dk/Crawl-for-Files.sh";
            recipesFile = new FileWriter(executableFileName, true);

            parsePage(webClient, "https://www.amherstqa.com/log-files/", "/");
            webClient.getCurrentWindow().getJobManager().removeAllJobs();
            webClient.close();

            recipesFile.close();

        } catch (IOException ioException) {
            System.out.println("An error occurred: " + ioException);
        }
    }

    static String[] linksToIgnore = {"?C=N;O=D", "?C=M;O=A", "?C=S;O=A", "?C=D;O=A"};
    static String[] urlsToIgnore = {"https://www.amherstqa.com/log-files/Google%20Drive/Down/web/", "https://www.amherstqa.com/log-files/phpMyAdmin-5.1.1-all-languages/"};

    private static void parsePage(WebClient webClient, String url, String parentFolder) {
//        System.out.println("url = " + url);
        if (Arrays.stream(urlsToIgnore).noneMatch(url::equals)) {
            try {
                HtmlPage page = webClient.getPage(url);

//            String title = page.getTitleText();
//            System.out.println("Page Title: " + title);


                List<HtmlAnchor> links = page.getAnchors();
                for (HtmlAnchor link : links) {
                    String href = link.getHrefAttribute();
                    if (Arrays.stream(linksToIgnore).noneMatch(href::equals) && (!href.equals(parentFolder))) {
                        if (href.contains("/")) {
                            String hyphenStripedUrl = url.substring(0, url.length() - 1);
                            parsePage(webClient, HtmlAnchor.getTargetUrl(href, page).toString(), parentFolder + hyphenStripedUrl.substring(hyphenStripedUrl.lastIndexOf('/') + 1) + "/");
                        } else {
//                            System.out.println("parentFolder = " + parentFolder);
//                            System.out.println("href = " + href);
                            String fullUrl = url + href;
                            String localRepository = "/home/dk/Data/wget_repository/www.amherstqa.com";
                            String parentFolderPath = url.substring(0, url.lastIndexOf('/'));
                            String filePath;
                            if (parentFolder.equals("/")) {
                                filePath = localRepository + parentFolderPath.substring(parentFolderPath.lastIndexOf('/')) + "/" + href;
                            } else {
                                filePath = localRepository + parentFolder + parentFolderPath.substring(parentFolderPath.lastIndexOf('/') + 1) + "/" + href;
                            }
                            assert (fullUrl.replace("https://www.amherstqa.com", "").equals(filePath.replace(localRepository, "")));
                            String command = "wget --continue " + "-O \"" + URLDecoder.decode(filePath, StandardCharsets.UTF_8) + "\" \"" + fullUrl + "\"";
//                            System.out.println("command = " + command);
                            System.out.println(command);
//                            Process p = Runtime.getRuntime().exec(command);
//                            BufferedReader bri = new BufferedReader
//                                    (new InputStreamReader(p.getInputStream()));
//                            BufferedReader bre = new BufferedReader
//                                    (new InputStreamReader(p.getErrorStream()));
//                            String line;
//                            while ((line = bri.readLine()) != null) {
//                                System.out.println(line);
//                            }
//                            bri.close();
//                            while ((line = bre.readLine()) != null) {
//                                System.out.println(line);
//                            }
//                            bre.close();
//                            p.waitFor();

                            recipesFile.write(command + "\n");
                        }
                    }
                }


//            } catch (IOException | InterruptedException e) {
            } catch (IOException e) {
                System.out.println("An error occurred: " + e);
            }
        }
    }
}
